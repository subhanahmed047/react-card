{"version":3,"sources":["constants/devices.js","components/card/image.jsx","components/card/content.jsx","components/card/wrapper.jsx","components/card/title.jsx","components/card/logo.jsx","components/card/card.jsx","components/container/container.jsx","theme/theme.js","theme/globalStyles.js","App.js","serviceWorker.js","index.js"],"names":["breakpoints","devices","minWidth","MOBILE_S","concat","MOBILE_M","MOBILE_L","TABLET","LAPTOP","LAPTOP_L","DESKTOP","DESKTOP_L","maxWidth","CardImage","styled","img","_templateObject","CardContent","div","content_templateObject","CardWrapper","wrapper_templateObject","props","theme","cardMargin","defaultProps","CardTitle","title_templateObject","colorPrimary","CardContentLogo","logo_templateObject","Card","_ref","card","react_default","a","createElement","wrapper","card_image","src","alt","title","content","logo","Container","container_templateObject","justify","wrap","GlobalStyle","createGlobalStyle","globalStyles_templateObject","App","styled_components_browser_esm","Fragment","globalStyles","container","id","map","card_card","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7d3fff4.chunk.js","sourcesContent":["const breakpoints = {\n    mobileS: '320px',\n    mobileM: '375px',\n    mobileL: '425px',\n    tablet: '768px',\n    laptop: '1024px',\n    laptopL: '1440px',\n    desktop: '2560px',\n};\n\nconst minWidthDevices = {\n    MOBILE_S: `(min-width: ${breakpoints.mobileS})`,\n    MOBILE_M: `(min-width: ${breakpoints.mobileM})`,\n    MOBILE_L: `(min-width: ${breakpoints.mobileL})`,\n    TABLET: `(min-width: ${breakpoints.tablet})`,\n    LAPTOP: `(min-width: ${breakpoints.laptop})`,\n    LAPTOP_L: `(min-width: ${breakpoints.laptopL})`,\n    DESKTOP: `(min-width: ${breakpoints.desktop})`,\n    DESKTOP_L: `(min-width: ${breakpoints.desktop})`,\n};\n\nconst maxWidthDevices = {\n    MOBILE_S: `(max-width: ${breakpoints.mobileS})`,\n    MOBILE_M: `(max-width: ${breakpoints.mobileM})`,\n    MOBILE_L: `(max-width: ${breakpoints.mobileL})`,\n    TABLET: `(max-width: ${breakpoints.tablet})`,\n    LAPTOP: `(max-width: ${breakpoints.laptop})`,\n    LAPTOP_L: `(max-width: ${breakpoints.laptopL})`,\n    DESKTOP: `(max-width: ${breakpoints.desktop})`,\n    DESKTOP_L: `(max-width: ${breakpoints.desktop})`,\n};\n\nconst devices = {\n    minWidth: minWidthDevices,\n    maxWidth: maxWidthDevices,\n};\n\nexport default devices;\n","import styled from 'styled-components';\n\nconst CardImage = styled.img`\n    height: auto;\n    max-width: 100%;\n    vertical-align: middle;\n`;\n\nexport default CardImage;","import styled from 'styled-components';\n\nconst CardContent = styled.div`\n    padding: 1rem;\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    display: block;\n    height: 18%;\n\tbackground: rgba(0, 0, 0, 0.6);\n    display: flex;\n    padding: 1rem;\n    opacity: 0;\n    visibility: hidden;\n    transition: visibility .2s, opacity .2s linear;\n    justify-content: start;\n    flex-direction: row;\n    align-items: center;\n}\n`;\n\nexport default CardContent;","import styled from 'styled-components';\nimport devices from '../../constants/devices';\nimport CardImage from './image';\nimport CardContent from './content';\n\nconst CardWrapper = styled.div`\n    position: relative;\n    background-color: white;\n    border-radius: 0.25rem;\n    box-shadow: 0 20px 40px -14px rgba(0, 0, 0, 0.25);\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n    margin: ${props => props.theme.cardMargin};\n\n    &:hover ${CardImage} {\n        webkit-filter: blur(.09rem);\n        filter: blur(.09rem);\n    }\n\n    &:hover ${CardContent} {\n        visibility: visible;\n        opacity: 1;\n    }\n\n    @media ${devices.minWidth.MOBILE_L} {\n        width: 50%;\n    }\n\n    @media ${devices.minWidth.TABLET} {\n        width: 33%;\n    }\n\n    /* Because there is no hover on a touch devices, display the content by default on tablet or lower width devices */\n    @media only screen and ${devices.maxWidth.TABLET} {\n        ${CardContent} {\n            opacity: 1;\n            visibility: visible;\n            transition: opacity 2s linear;\n        }\n    }\n`;\n\nCardWrapper.defaultProps = {\n    theme: {\n        cardMargin: '.5rem',\n    }\n}\n\nexport default CardWrapper;","import styled from 'styled-components';\n\nconst CardTitle = styled.div`\n    color: ${props => props.theme.colorPrimary};\n    font-size: 1rem;\n    font-weight: 700;\n    letter-spacing: 1px;\n    text-transform: capitalize;\n    margin: 0px;\n`;\n\nCardTitle.defaultProps = {\n    theme: {\n        colorPrimary: '#ffffff',\n    }\n}\n\nexport default CardTitle;","import styled from 'styled-components';\n\nconst CardContentLogo = styled.img`\n    width: auto;\n    max-height: 100%;\n`;\n\nexport default CardContentLogo;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CardWrapper, CardImage, CardContentLogo, CardTitle, CardContent } from '../card';\n\nconst Card = ({ card }) => {\n    return (\n        <CardWrapper>\n            <CardImage src={card.img} alt={card.title} />\n            <CardContent>\n                <CardContentLogo src={card.logo} alt=\"Company Logo\" />\n                <CardTitle>{card.title}</CardTitle>\n            </CardContent>\n        </CardWrapper>\n    );\n}\n\nCard.propTypes = {\n    card: PropTypes.shape({\n        img: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        logo: PropTypes.string.isRequired,\n    })\n};\n\nexport default Card;","import styled from 'styled-components';\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: ${props => props.justify ? props.justify : 'center'};\n    flex-wrap: ${props => props.wrap ? props.wrap : 'wrap'};\n    margin: 0;\n    padding: 0;\n`;\n\nexport default Container;","const theme = {\n    cardMargin: '1rem',\n    colorPrimary: '#ffffff',\n};\nexport default theme;\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n    body {\n        font-family: \"Helvetica Neue\", \"Oxygen\", \"Segoe UI\", \"Roboto\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport Card from './components/card/card';\nimport Container from './components/container/container';\nimport theme from './theme/theme';\nimport GlobalStyle from './theme/globalStyles';\n\nfunction App() {\n    const cards = [\n        {\n            id: 0,\n            title: 'Card Grid Layout',\n            img: 'https://i.ibb.co/jkqfpL9/tile.jpg',\n            logo: 'https://i.ibb.co/pQGpztg/logo.png',\n        },\n        {\n            id: 1,\n            title: 'Card Grid Layout',\n            img: 'https://i.ibb.co/jkqfpL9/tile.jpg',\n            logo: 'https://i.ibb.co/pQGpztg/logo.png',\n        },\n        {\n            id: 2,\n            title: 'Card Grid Layout',\n            img: 'https://i.ibb.co/jkqfpL9/tile.jpg',\n            logo: 'https://i.ibb.co/pQGpztg/logo.png',\n        },\n        {\n            id: 3,\n            title: 'Card Grid Layout',\n            img: 'https://i.ibb.co/jkqfpL9/tile.jpg',\n            logo: 'https://i.ibb.co/pQGpztg/logo.png',\n        },\n    ];\n    return (\n        <ThemeProvider theme={theme}>\n            <React.Fragment>\n                <GlobalStyle />\n                <Container>\n                    {cards.map((card) => (\n                        <Card key={card.id} card={card} />\n                    ))}\n                </Container>\n            </React.Fragment>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}