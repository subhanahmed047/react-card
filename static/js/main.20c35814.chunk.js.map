{"version":3,"sources":["constants/devices.js","components/card/wrapper.jsx","components/card/image.jsx","components/card/content.jsx","components/card/title.jsx","components/card/logo.jsx","components/card/card.jsx","components/card/container.jsx","App.js","serviceWorker.js","index.js"],"names":["size","devices","MOBILE_S","concat","MOBILE_M","MOBILE_L","TABLET","LAPTOP","LAPTOP_L","DESKTOP","DESKTOP_L","CardWrapper","styled","div","_templateObject","CardImage","img","image_templateObject","CardContent","content_templateObject","CardTitle","title_templateObject","CardContentLogo","logo_templateObject","Card","_ref","title","logo","react_default","a","createElement","Fragment","wrapper","card_image","src","alt","content","card_logo","card_title","CardContainer","container_templateObject","App","container","id","map","card","card_card","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAAMA,EAEO,QAFPA,EAGO,QAHPA,EAIM,QAJNA,EAKM,SALNA,EAMO,SANPA,EAOO,SAcEC,EAXC,CACZC,SAAQ,eAAAC,OAVC,QAUD,KACRC,SAAQ,eAAAD,OAAiBH,EAAjB,KACRK,SAAQ,eAAAF,OAAiBH,EAAjB,KACRM,OAAM,eAAAH,OAAiBH,EAAjB,KACNO,OAAM,eAAAJ,OAAiBH,EAAjB,KACNQ,SAAQ,eAAAL,OAAiBH,EAAjB,KACRS,QAAO,eAAAN,OAAiBH,EAAjB,KACPU,UAAS,eAAAP,OAAiBH,EAAjB,oZCfb,IAmBeW,EAnBKC,IAAOC,IAAVC,IAUJb,EAAQI,SAIRJ,EAAQK,qJCfrB,IAMeS,EANGH,IAAOI,IAAVC,kXCAf,IAiBeC,EAjBKN,IAAOC,IAAVM,6NCAjB,IASeC,EATGR,IAAOC,IAAVQ,qHCAf,IAKeC,EALSV,IAAOI,IAAVO,KC0BNC,EApBF,SAAAC,GAA0B,IAAvBT,EAAuBS,EAAvBT,IAAKU,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,KACxB,OACIC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAACE,EAAD,KACIJ,EAAAC,EAAAC,cAACG,EAAD,CAAWC,IAAKlB,EAAKmB,IAAKT,IAC1BE,EAAAC,EAAAC,cAACM,EAAD,KACIR,EAAAC,EAAAC,cAACO,EAAD,CAAiBH,IAAKP,EAAMQ,IAAI,iBAChCP,EAAAC,EAAAC,cAACQ,EAAD,KAAYZ,8MCbhC,IASea,EATO3B,IAAOC,IAAV2B,KC4CJC,MAzCf,WA2BI,OACIb,EAAAC,EAAAC,cAACY,EAAD,KA3BS,CACT,CACIC,GAAI,EACJjB,MAAO,mBACPV,IAAK,oCACLW,KAAM,qCAEV,CACIgB,GAAI,EACJjB,MAAO,mBACPV,IAAK,oCACLW,KAAM,qCAEV,CACIgB,GAAI,EACJjB,MAAO,mBACPV,IAAK,oCACLW,KAAM,qCAEV,CACIgB,GAAI,EACJjB,MAAO,mBACPV,IAAK,oCACLW,KAAM,sCAKAiB,IAAI,SAACC,GAAD,OACNjB,EAAAC,EAAAC,cAACgB,EAAD,CACIC,IAAKF,EAAKF,GACV3B,IAAK6B,EAAK7B,IACVU,MAAOmB,EAAKnB,MACZC,KAAMkB,EAAKlB,WC3BXqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.20c35814.chunk.js","sourcesContent":["const size = {\n    mobileS: '320px',\n    mobileM: '375px',\n    mobileL: '425px',\n    tablet: '768px',\n    laptop: '1024px',\n    laptopL: '1440px',\n    desktop: '2560px',\n};\n\nconst devices = {\n    MOBILE_S: `(min-width: ${size.mobileS})`,\n    MOBILE_M: `(min-width: ${size.mobileM})`,\n    MOBILE_L: `(min-width: ${size.mobileL})`,\n    TABLET: `(min-width: ${size.tablet})`,\n    LAPTOP: `(min-width: ${size.laptop})`,\n    LAPTOP_L: `(min-width: ${size.laptopL})`,\n    DESKTOP: `(min-width: ${size.desktop})`,\n    DESKTOP_L: `(min-width: ${size.desktop})`,\n};\n\nexport default devices;\n","import styled from 'styled-components';\nimport devices from '../../constants/devices';\n\nconst CardWrapper = styled.div`\n    position: relative;\n    background-color: white;\n    border-radius: 0.25rem;\n    box-shadow: 0 20px 40px -14px rgba(0, 0, 0, 0.25);\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n    margin: 1rem;\n\n    @media ${devices.MOBILE_L} {\n        width: 50%;\n    }\n\n    @media ${devices.TABLET} {\n        width: 33%;\n    }\n`;\n\nexport default CardWrapper;","import styled from 'styled-components';\n\nconst CardImage = styled.img`\n    height: auto;\n    max-width: 100%;\n    vertical-align: middle;\n`;\n\nexport default CardImage;","import styled from 'styled-components';\n\nconst CardContent = styled.div`\n    padding: 1rem;\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    display: block;\n    height: 18%;\n\tbackground: rgba(0, 0, 0, 0.6);\n    display: flex;\n    padding: 1rem;\n    opacity: 1;\n    justify-content: start;\n    flex-direction: row;\n    align-items: center;\n}\n`;\n\nexport default CardContent;","import styled from 'styled-components';\n\nconst CardTitle = styled.div`\n    color: #ffffff;\n    font-size: 1.1rem;\n    font-weight: 700;\n    letter-spacing: 1px;\n    text-transform: capitalize;\n    margin: 0px;\n`;\n\nexport default CardTitle;","import styled from 'styled-components';\n\nconst CardContentLogo = styled.img`\n    width: auto;\n    max-height: 100%;\n`;\n\nexport default CardContentLogo;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CardWrapper from './wrapper';\nimport CardImage from './image';\nimport CardContent from './content';\nimport CardTitle from './title';\nimport CardContentLogo from './logo';\n\nconst Card = ({ img, title, logo }) => {\n    return (\n        <React.Fragment>\n            <CardWrapper>\n                <CardImage src={img} alt={title} />\n                <CardContent>\n                    <CardContentLogo src={logo} alt=\"Company Logo\" />\n                    <CardTitle>{title}</CardTitle>\n                </CardContent>\n            </CardWrapper>\n        </React.Fragment >\n    );\n}\n\nCard.propTypes = {\n    img: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    logo: PropTypes.string.isRequired\n};\n\nexport default Card;","import styled from 'styled-components';\n\nconst CardContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    list-style: none;\n    margin: 0;\n    padding: 0;\n`;\n\nexport default CardContainer;","import React from 'react';\nimport './App.css';\nimport Card from './components/card/card';\nimport CardContainer from './components/card/container';\n\nfunction App() {\n    const data = [\n        {\n            id: 0,\n            title: 'Card Grid Layout',\n            img: 'https://i.ibb.co/jkqfpL9/tile.jpg',\n            logo: 'https://i.ibb.co/pQGpztg/logo.png',\n        },\n        {\n            id: 1,\n            title: 'Card Grid Layout',\n            img: 'https://i.ibb.co/jkqfpL9/tile.jpg',\n            logo: 'https://i.ibb.co/pQGpztg/logo.png',\n        },\n        {\n            id: 2,\n            title: 'Card Grid Layout',\n            img: 'https://i.ibb.co/jkqfpL9/tile.jpg',\n            logo: 'https://i.ibb.co/pQGpztg/logo.png',\n        },\n        {\n            id: 3,\n            title: 'Card Grid Layout',\n            img: 'https://i.ibb.co/jkqfpL9/tile.jpg',\n            logo: 'https://i.ibb.co/pQGpztg/logo.png',\n        },\n    ];\n    return (\n        <CardContainer>\n            {data.map((card) => (\n                <Card\n                    key={card.id}\n                    img={card.img}\n                    title={card.title}\n                    logo={card.logo}\n                />\n            ))}\n        </CardContainer>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}